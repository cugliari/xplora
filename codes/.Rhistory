lines(density(f_sim, bw = 0.05), col = 3)
hist(x, f_x, breaks = 2, main = 'undersmooth')
hist(x, f_x, breaks = 3, main = 'undersmooth')
hist(f_x, breaks = 3, main = 'undersmooth')
?hist
truehist
hist(f_x, breaks = 3, main = 'undersmooth')
hist(f_sim, breaks = 3, main = 'undersmooth')
hist(f_sim,             main = 'acceptable')
hist(f_sim, breaks = 20, main = 'acceptable')
hist(f_sim, breaks = 30, main = 'acceptable')
hist(f_sim, breaks = 30, main = 'acceptable')
hist(f_sim, breaks = 50, main = 'acceptable')
hist(f_sim, breaks = 100, main = 'acceptable')
hist(f_sim, breaks = 1000, main = 'oversmooth')
hist(f_sim, breaks = 500, main = 'oversmooth')
?cv
??cv
?hist
hist(f_sim)
a <- hist(f_sim)
a
calibrateHistogram <- function(x, m) {
n <- length(x)
p_hat <- hist(f_sim, breaks = m)$density
2 * m / (n - 1) - (n + 1) * m / (n - 1) * sum(p_hat^2)
}
?curve
grid_m <- 2:500
riskHist <- calibrateHistogram(f_sim, grid_m)
for(i in grid_m) print(i)
hist(f_sim, breaks = 1)
riskHist <- numeric(length(grid_m))
for(i in 1:500) riskHist[i] <- calibrateHistogram(f_sim, i)
plot(riskHist, type = 'l')
unifs <- sort(runif(10000))
f_sim <- numeric(length(unifs))
for(j in 1:length(cdf)) {
if(j == 1) k <- 1
if(unifs[k] >= cdf[j]) f_sim[k] <- x[max(1, j - 1)] else k <- k + 1
if(k > length(f_sim)) break
}
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
legend("topleft", c('cumulative', 'density'),
lty = 1, lwd = 2, col = c(4, 1))
rug(f_sim)
calibrateHistogram <- function(x, m) {
n     <- length(x)
p_hat <- hist(f_sim, breaks = m)$density
#  2 * m / (n - 1) - (n + 1) * m / (n - 1) * sum(p_hat^2)
m / (n - 1) * (2 - (n + 1) * sum(p_hat^2)  )
}
riskHist <- numeric(length(grid_m))
for(i in 1:1000) riskHist[i] <- calibrateHistogram(f_sim, i)
plot(riskHist, type = 'l')
?hist
calibrateHistogram <- function(x, m) {
n     <- length(x)
p_hat <- hist(f_sim, plot = FALSE, breaks = m)$counts / n
#  2 * m / (n - 1) - (n + 1) * m / (n - 1) * sum(p_hat^2)
m / (n - 1) * (2 - (n + 1) * sum(p_hat^2)  )
}
riskHist <- numeric(length(grid_m))
for(i in 1:1000) riskHist[i] <- calibrateHistogram(f_sim, i)
plot(riskHist, type = 'l')
for(i in 1:5000) riskHist[i] <- calibrateHistogram(f_sim, i)
plot(riskHist, type = 'l')
a
a$counts
sum(a$counts)
?truehist
library(MASS)
?truehist
truehist(f_sim)
truehist
f_sim
rang(f_sim)
range(f_sim)
(diff(range(f_sim)))
(f_sim - min(f_sim)) / diff(range(f_sim))
f_sim_01 <- (f_sim - min(f_sim)) / diff(range(f_sim))
f_sim_01 <- (f_sim - min(f_sim)) / diff(range(f_sim))
for(i in 1:5000)
riskHist[i] <- calibrateHistogram(f_sim_01, i)
plot(riskHist, type = 'l')
calibrateHistogram2 <- function(x, m) {
n     <- length(x)
p_hat <- hist(x, plot = FALSE, breaks = m)$counts / n
#  2 * m / (n - 1) - (n + 1) * m / (n - 1) * sum(p_hat^2)
m / (n - 1) * (2 - (n + 1) * sum(p_hat^2)  )
}
riskHist <- numeric(length(grid_m))
f_sim_01 <- (f_sim - min(f_sim)) / diff(range(f_sim))
for(i in 1:5000) riskHist[i] <- calibrateHistogram2(f_sim_01, i)
plot(riskHist, type = 'l')
range(f_sim_01)
for(i in 1:500) riskHist[i] <- calibrateHistogram2(f_sim_01, i)
riskHist
hist(f_sim_01, breaks=10)
hist(f_sim_01, breaks=10)$counts
hist(f_sim_01, breaks=10)$counts / 10000
(hist(f_sim_01, breaks=10)$counts / 10000) ^2
sum((hist(f_sim_01, breaks=10)$counts / 10000) ^2)
sum((hist(f_sim_01, breaks=10)$counts / 10000) ^2) * 10000
2 - sum((hist(f_sim_01, breaks=10)$counts / 10000) ^2) * 10000
calibrateHistogram2 <- function(x, m) {
n     <- length(x)
p_hat <- hist(x, plot = FALSE, breaks = m)$counts / n
m / (n - 1) * (2 - (n + 1) / n^2 * sum(p_hat^2)  )
}
riskHist <- numeric(length(grid_m))
f_sim_01 <- (f_sim - min(f_sim)) / diff(range(f_sim))
for(i in 1:500) riskHist[i] <- calibrateHistogram2(f_sim_01, i)
plot(riskHist, type = 'l')
a
calibrateHistogram2 <- function(x, m) {
n     <- length(x)
p_hat <- hist(x, plot = FALSE, breaks = m)$counts
m / (n - 1) * (2 - (n + 1) / n^2 * sum(p_hat^2)  )
}
riskHist <- numeric(length(grid_m))
f_sim_01 <- (f_sim - min(f_sim)) / diff(range(f_sim))
for(i in 1:500) riskHist[i] <- calibrateHistogram2(f_sim_01, i)
plot(riskHist, type = 'l')
for(i in 1:5000) riskHist[i] <- calibrateHistogram2(f_sim_01, i)
plot(riskHist, type = 'l')
riskHist <- numeric(length(grid_m))
f_sim_01 <- (f_sim - min(f_sim)) / diff(range(f_sim))
for(i in 1:8000) riskHist[i] <- calibrateHistogram2(f_sim_01, i)
plot(riskHist, type = 'l')
head(riskHist)
diff(riskHist)
1/.2083295
lines(density(f_sim, bw = 0.01), col = 2)
plot(f_sim, type = 'l')
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
lines(density(f_sim, bw = 0.01), col = 2)
lines(density(f_sim, bw = 0.5), col = 4)
lines(density(f_sim, bw = 0.05), col = 3)
lines(density(f_sim, bw = 0.1), col = 3)
lines(density(f_sim, bw = 0.1), col = 3)
lines(density(f_sim, bw = 0.2), col = 3)
lines(density(f_sim, bw = 0.3), col = 3)
lines(density(f_sim, bw = 0.4), col = 3)
lines(density(f_sim, bw = 5), col = 4)
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
lines(density(f_sim, bw = 0.01), col = 2)
lines(density(f_sim, bw = 5), col = 4)
lines(density(f_sim, bw = 2), col = 4)
lines(density(f_sim, bw = 1), col = 4)
lines(density(f_sim, bw = 0.01), col = 2)
lines(density(f_sim, bw = 1), col = 4)
lines(density(f_sim, bw = 0.04), col = 3)
lines(density(f_sim, bw = 0.001), col = 2)
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
lines(density(f_sim, bw = 0.001), col = 2)
lines(density(f_sim, bw = 0.005), col = 3)
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
lines(density(f_sim, bw = 0.001), col = 2)
lines(density(f_sim, bw = 1), col = 4)
lines(density(f_sim, bw = 0.005), col = 3)
unifs <- sort(runif(1000))
f_sim <- numeric(length(unifs))
for(j in 1:length(cdf)) {
if(j == 1) k <- 1
if(unifs[k] >= cdf[j]) f_sim[k] <- x[max(1, j - 1)] else k <- k + 1
if(k > length(f_sim)) break
}
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
#lines(x, cdf, col = 4, lwd = 2)
legend("topleft", c('cumulative', 'density'),
lty = 1, lwd = 2, col = c(4, 1))
rug(f_sim)
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
lines(density(f_sim, bw = 0.001), col = 2)
lines(density(f_sim, bw = 0.005), col = 3)
lines(density(f_sim, bw = 1), col = 4)
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
lines(density(f_sim, bw = 0.005), col = 2)
lines(density(f_sim, bw = 0.01), col = 3)
lines(density(f_sim, bw = 1), col = 4)
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
lines(density(f_sim, bw = 0.005), col = 2)
lines(density(f_sim, bw = 0.1), col = 3)
lines(density(f_sim, bw = 1), col = 4)
lines(density(f_sim, bw = 0.2), col = 3)
lines(density(f_sim, bw = 0.05), col = 3)
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
lines(density(f_sim, bw = 0.005), col = 2)
lines(density(f_sim, bw = 0.05), col = 3)
plot(x, f_x, type = 'l', lwd = 2, col = 'grey')
lines(density(f_sim, bw = 0.05), col = 3)
density(f_sim)
?integrate
library(rpart)
?rpart
data(iris)
data(iris)
fit <- rpart(Species ~ ., data = iris)
plot(iris)
plot(iris, pch = 19, col = 'grey')
plot(iris[, -5], pch = 19, col = Species)
plot(iris[, -5], pch = 19, data = iris, col = Species)
plot(iris[, -5], pch = 19, col = iris$Species)
library(rgl)
library(help = rgl)
?plot3d
plot3d(iris[, -5])
plot3d(iris[, -5], pch = 19)
plot3d(iris[, -5], pch = 19, col = iris$Species)
plot3d(iris[, -5], pch = 19, col = as.integer(iris$Species))
plot3d(iris[, -5], pch = 19, col = as.integer(iris$Species),
cex = 2)
plot3d(iris[, -5], pch = 19, col = as.integer(iris$Species),
cex = 3)
plot3d(iris[, -5], pch = 19, col = as.integer(iris$Species),
size = 3)
plot3d(iris[, -5], pch = 19, col = as.integer(iris$Species),
size = 30)
plot3d(iris[, -5], pch = 19, col = as.integer(iris$Species),
size = 10)
plot3d(iris[, -5],
col = as.integer(iris$Species),
type = 'points', size = 10)
plot3d(iris[, -5],
col = as.integer(iris$Species),
type = 'points', size = 10)
plot3d(iris[, -5],
col = as.integer(iris$Species),
type = 'points', size = 2)
plot3d(iris[, -5],
col = as.integer(iris$Species),
type = 'point', size = 2)
plot3d(iris[, -5],
col = as.integer(iris$Species),
type = 'dots', size = 2)
plot3d(iris[, -5],
col = as.integer(iris$Species),
type = 'dot', size = 2)
plot3d(iris[, -5],
col = as.integer(iris$Species),
type = 'p', size = 2)
plot3d(iris[, -5],
col = as.integer(iris$Species),
size = 10)
??classification
fit <- rpart(Species ~ ., data = iris)
plot(fit)
print(fit)
?rpart
text(fit)
plot3d(iris[, -5],
col = as.integer(iris$Species),
size = 10)
plot(iris[, -5], pch = 19, col = iris$Species)
plot(iris[, c(1, 3)], pch = 19, col = iris$Species)
fit <- rpart(Species ~ ., data = iris)
?rpart
fit <- rpart(Species ~ ., data = iris, method = "class")
fit
plot(fit)
text(fit)
plot(fit)
text(fit)
par(mai = c(.1, .1, .1, .1))
plot(fit)
text(fit)
par(mai = c(.1, .2, .1, .2))
plot(fit)
text(fit)
par(mai = c(.1, .4, .1, .4))
plot(fit)
text(fit)
par(mai = c(.1, .5, .1, .5))
plot(fit)
text(fit)
par(mai = c(.1, 1, .1, 1))
plot(fit)
text(fit)
par(mai = c(.1, 1, .1, 1), xpd = NA)
plot(fit)
text(fit)
par(mai = c(.1, .1, .1, .1), xpd = NA)
plot(fit)
text(fit)
par(mai = c(.1, .3, .1, .3), xpd = NA)
plot(fit)
text(fit)
plot(iris[, c(1, 4)], pch = 19, col = iris$Species)
par(mai = c(.4, .4, .4, .4), xpd = NA)
plot(fit)
text(fit)
plot(iris[, c(1, 4)], pch = 19, col = iris$Species)
par(mai = c(.5, .4, .4, .4), xpd = NA)
plot(iris[, c(1, 4)], pch = 19, col = iris$Species)
par(mai = c(.5, .5, .4, .4), xpd = NA)
plot(iris[, c(1, 4)], pch = 19, col = iris$Species)
plot(jitter(iris[, c(1, 4)]), pch = 19, col = iris$Species)
plot(iris[, c(1, 4)], pch = 19, col = iris$Species)
fit <- rpart(Species ~ ., data = iris, method = "class")
par(mai = c(.5, .5, .4, .4), xpd = NA)
plot(iris[, c(1, 4)], pch = 19, col = iris$Species)
fit <- rpart(Species ~ ., data = iris, method = "class")
plot(fit)
text(fit)
fit
par(mai = c(.8, .8, .4, .4), xpd = NA)
plot(iris[, c(1, 4)], pch = 19, col = iris$Species)
par(mai = c(1, 1, .4, .4), xpd = NA)
plot(iris[, c(1, 4)], pch = 19, col = iris$Species)
par(mai = c(1.1, 1.2, .2, .2), xpd = NA)
plot(iris[, c(1, 4)], pch = 19, col = iris$Species)
par(mai = c(1.1, 1.2, .2, .2), xpd = NA)
plot(iris[, c(2, 4)], pch = 19, col = iris$Species)
par(mai = c(1.1, 1.2, .2, .2), xpd = NA)
plot(iris[, c(1, 2)], pch = 19, col = iris$Species)
par(mai = c(1.1, 1.2, .2, .2), xpd = NA)
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
abline(v = 2.45)
par(mai = c(1.1, 1.2, .2, .2))
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
abline(v = 2.45)
abline(v = 2.45, lwd = 2, lty = 2)
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
abline(v = 2.45, lwd = 2, lty = 2)
dev.off()
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
abline(v = 2.45, lwd = 2, lty = 2)
fit
fit$frame
fit$where
fit <- rpart(Species ~ ., data = iris, method = "class",
control = rpart.control(minsplit = 5))
plot(fit)
text(fit)
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
fit
fit <- rpart(Species ~ ., data = iris, method = "class")
plot(fit)
text(fit)
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
abline(v = 2.45, lwd = 2, lty = 2)
?line
?line
library(animation)
library(help = animation)
?knn.ani
ls()
oopt = ani.options(interval = 2, nmax = ifelse(interactive(), 10, 2))
x = matrix(c(rnorm(80, mean = -1), rnorm(80, mean = 1)), ncol = 2, byrow = TRUE)
y = matrix(rnorm(20, mean = 0, sd = 1.2), ncol = 2)
knn.ani(train = x, test = y, cl = rep(c("first class", "second class"), each = 40),
k = 30)
knn.ani(train = x, test = y, k = 5,
cl = rep(c("first class", "second class"), each = 40))
oopt = ani.options(interval = 2, nmax = ifelse(interactive(), 10, 2))
x <- matrix(c(rnorm(80, mean = -1), rnorm(80, mean = 1)),
ncol = 2, byrow = TRUE)
y <- matrix(rnorm(20, mean = 0, sd = 1.2), ncol = 2)
knn.ani(train = x, test = y, k = 10,
cl = rep(c("first class", "second class"), each = 40))
oopt = ani.options(interval = 2, nmax = 2)
x <- matrix(c(rnorm(80, mean = -1), rnorm(80, mean = 1)),
ncol = 2, byrow = TRUE)
y <- matrix(rnorm(20, mean = 0, sd = 1.2), ncol = 2)
knn.ani(train = x, test = y, k = 10,
cl = rep(c("first class", "second class"), each = 40))
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
abline(v = 2.45, lwd = 2, lty = 2)
line(cbind(c(2.45, 1, )))
?line
fit
line(cbind(c(2.45, 7), c(1.75, 1.75))))
line(cbind(c(2.45, 7), c(1.75, 1.75)))
cbind(c(2.45, 7), c(1.75, 1.75))
?line
line(c(2.45, 7), c(1.75, 1.75))
line(c(2.45, 7), c(1.75, 1.75))
?segments
segments(2.45, 1.75, 7, 1.75)
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
abline(v = 2.45, lwd = 2, lty = 2)
segments(2.45, 1.75, 7, 1.75, lwd = 2, lty = 2)
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
abline(v = 2.45, lwd = 2, lty = 2)
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
abline(v = 2.45, lwd = 2, lty = 2)
segments(2.45, 1.75, 7, 1.75, lwd = 2, lty = 2)
plot(fit)
text(fit)
par(mai = c(1.1, 1.2, .2, .2), xpd = NA)
plot(fit)
text(fit)
cars <- car90[, -match(c("Rim", "Tires", "Model2"), names(car90))]
head(cars)
dim(car)
dim(cars)
summary(cars)
carfit <- rpart(Price / 1000 ~ ., data = cars)
carfit
plot(carfit)
text(carfit)
summary(cars$Price)
data(iris)
plot(iris[, c(3, 4)], pch = 19, col = iris$Species)
fit <- rpart(Species ~ ., data = iris, method = "class")
plot(fit)
text(fit)
cars <- car90[, -match(c("Rim", "Tires", "Model2"), names(car90))]
ls()
dim(cars)
cars[1, ]
?cars90
?car90
printcp(cars)
printcp(carfit)
sd(cars$Price)
sd(cars$Price, na.rm = TRUE)
cars$Price - mean(cars$Price, na.rm = T)
(cars$Price - mean(cars$Price, na.rm = T))^2
sd(cars$Price / 1000, na.rm = TRUE)
?printcp*
v
?printcp
printcp(carfit)
library(randomForest)
Pric
carfit2 <- randomForest(Price / 1000 ~ ., data = cars)
carfit2 <- randomForest(Price / 1000 ~ ., data = na.omit(cars))
carfit2
fitted(carfit2)
predict(carfit2)
?randomForest
varImpPlot(carfit2)
names(carfit2)
carfit2$oob.times
carfit2$inbag
carfit2$predicted
carfit2
iris_rf <- randomForest(Species ~ ., data = iris)
varImpPlot(iris_rf)
iris_rf
??barley
library(lattice)
?barley
head(barley)
levels(barley$year)
book.1.1 <-
function()
{
n <- length(levels(barley$year))
dotplot(variety ~ yield | site,
data = barley,
groups = year,
panel = function(x, y, ...) {
dot.line <- trellis.par.get("dot.line")
abline(h = y, lwd = dot.line$lwd, lty = dot.line$lty, col = dot.line$col)
panel.superpose(x, y, ...)
},
layout = c(1, 6),
aspect = .5,
sub = list("Figure 1.1",cex=.8),
xlab = "Barley Yield (bushels/acre)",
key = list(points = Rows(trellis.par.get("superpose.symbol"), 1:n),
text = list(levels(barley$year)),
columns = n))
}
book.1.1()
slidify()
library(slidify)
slidify()
slidify('~/Dropbox/cours/stat-exploratoire/cours/index.Rmd')
slidify('~/Dropbox/cours/stat-exploratoire/cours/index.Rmd')
quartet <- read.table('quartet.txt')
setwd('Dropbox/cours/stat-exploratoire/cours/codes/')
quartet <- read.table('quartet.txt')
quartet
quartet <- read.table('quartet.txt')
quartet
quartet <- read.table('quartet.txt', header = TRUE)
quartet
summary(quartet)
mean(quartet)
colMeans(quartet)
sd(quartet)
str(quartet)
summary(quartet)
cor(quartet)
plot(x1, y1, data = quartet)
plot(x1, y1, data = quartet)
names(quartet)
plot(x1, y1, data = quartet)
?plot
plot(quartet$x1, quartet$y1)
plot(quartet$x1, quartet$y1, pch = 19)
abline(lm(y1 ~ x1, data = quartet))
?plot.default
plot(quartet$x1, quartet$y1, pch = 19,
panel.last = abline(lm(y1 ~ x1, data = quartet), lwd = 2) )
colMeans(x)
colMeans(quartet)
apply(quartet, 2, sd)
apply(quartet, 2, var)
cor(quartet)
cor(quartet[, 1:2])
cor(quartet[, 2+1:2])
cor(quartet[, 4+1:2])
cor(quartet[, 6+1:2])
lm(y2~x2, data = quartet)
lm(y1~x1, data = quartet)
lm(y4~x4, data = quartet)
